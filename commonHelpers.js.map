{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst startBtn = document.querySelector('.start-btn');\nconst inputEl = document.querySelector('[type=\"text\"]');\nconst timerEl = document.querySelector('.timer');\nconst field = document.querySelector('.field');\nlet userSelectedDate;\n\nlet intervalId = null;\n//!===================================================================\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n        if (selectedDates[0] < new Date()) {\n       return iziToast.show({\n    message: \"Please choose a date in the future\" });\n    }\n startBtn.removeAttribute('disabled');\n\n userSelectedDate = selectedDates[0];\n        \n  },\n};\n\nflatpickr('#datetime-picker', options);\n\n\n function convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n    }\n    \nfunction  padStart(value) {\n    return String(value).padStart(2, \"0\");\n    }\n//!===================================================================\nstartBtn.addEventListener('click', () => { \n\n    startBtn.setAttribute('disabled', '');\n    inputEl.setAttribute('disabled', '');\n\n  intervalId= setInterval(updateMarkup, 1000);\n});\n//!===================================================================\nfunction updateMarkup() {\n\n    const different = userSelectedDate - Date.now();\n    console.log(different);\n    if (different < 1000) {\n        clearInterval(intervalId);\n        iziToast.success({ message: 'congratulation' });\n        inputEl.removeAttribute('disabled');\n    }\n    \n    const { days, hours, minutes, seconds } = convertMs(different);\n    timerEl.querySelector('[data-days]').textContent = padStart(days);\n    timerEl.querySelector('[data-hours]').textContent = padStart(hours);\n    timerEl.querySelector('[data-minutes]').textContent = padStart(minutes);\n    timerEl.querySelector('[data-seconds]').textContent = padStart(seconds);\n}\n\n\n\n\n//!===================================================================\n\n\n\n\n\n// inputEl.addEventListener('input', e => {\n//     const currentDate = Date.now();\n//     if (initTime <= currentDate) {\n//         startBtn.classList.add('disabled');\n//     startBtn.setAttribute('disabled', '');\n        \n//     iziToast.show({\n//     message: \"Please choose a date in the future\"\n// });\n//     }\n\n//     startBtn.removeAttribute('disabled');\n//     // timer.start();\n//     updateMarkup();\n// })\n\n//!===================================================================\n// startBtn.addEventListener('click', () => {\n//     startBtn.setAttribute('disabled', '');\n    \n//     timer.start();\n// });\n\n// inputEl.addEventListener('input', e => {\n//     const currentDate = Date.now();\n//     if (initTime <= currentDate) {\n//         startBtn.classList.add('disabled');\n//     startBtn.setAttribute('disabled', '');\n        \n//     iziToast.show({\n//     message: \"Please choose a date in the future\"\n// });\n//     }\n\n//     startBtn.removeAttribute('disabled');\n//     // timer.start();\n//     updateMarkup();\n// })\n//!===================================================================\n// class Timer {\n//     constructor(onTick, date) {\n//         // this.isActive = false;\n//         this.userSelectedDate = date;\n//         this.tick = onTick;\n//         this.intervalId = null;\n//     }\n\n//     start() {\n//         if (this.isActive) return;\n//         this.isActive = true;\n\n//         this.intervalId = setInterval(() => {\n//             const ms = this.userSelectedDate - Date.now();\n//             const time = this.convertMs(ms);\n//             this.updateMarkup(time);\n//         }, 1000);\n\n//         setTimeout(() => {\n//             clearInterval(this.intervalId);\n//         }, this.userSelectedDate = Date.now());\n//     }\n\n//  convertMs(ms) {\n//   // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   // Remaining days\n//   const days = Math.floor(ms / day);\n//   // Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n//   // Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   // Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n//     }\n    \n//     padStart(value) {\n//     return String(value).padStart(2, \"0\");\n//     }\n// }\n\n// function tick({days, hours, mins, secs}) {\n//     field.querySelector('[data-days]').textContent = padStart(days);\n//     field.querySelector('[data-hours]').textContent = padStart(hours);\n//     field.querySelector('[data-minutes]').textContent = padStart(mins);\n//     field.querySelector('[data-seconds]').textContent = padStart(secs);\n\n// }\n     \n// const date = new Date('2024-05-16 12:39');\n// const timer = new Timer(tick, date);\n//!===================================================================\n\n\n\n\n\n"],"names":["startBtn","inputEl","timerEl","userSelectedDate","intervalId","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","padStart","value","updateMarkup","different"],"mappings":"+IAMA,MAAMA,EAAW,SAAS,cAAc,YAAY,EAC9CC,EAAU,SAAS,cAAc,eAAe,EAChDC,EAAU,SAAS,cAAc,QAAQ,EACjC,SAAS,cAAc,QAAQ,EAC7C,IAAIC,EAEAC,EAAa,KACjB;AACA,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CACnB,GAAIA,EAAc,CAAC,EAAI,IAAI,KAC5B,OAAOC,EAAS,KAAK,CACxB,QAAS,oCAAoC,CAAE,EAElDP,EAAS,gBAAgB,UAAU,EAEnCG,EAAmBG,EAAc,CAAC,CAEhC,CACH,EAEAE,EAAU,mBAAoBH,CAAO,EAGpC,SAASI,EAAUC,EAAI,CAOtB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACnC,CAEL,SAAUC,EAASC,EAAO,CACtB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACnC,CACL;AACAhB,EAAS,iBAAiB,QAAS,IAAM,CAErCA,EAAS,aAAa,WAAY,EAAE,EACpCC,EAAQ,aAAa,WAAY,EAAE,EAErCG,EAAY,YAAYa,EAAc,GAAI,CAC5C,CAAC,EACD;AACA,SAASA,GAAe,CAEpB,MAAMC,EAAYf,EAAmB,KAAK,IAAG,EAC7C,QAAQ,IAAIe,CAAS,EACjBA,EAAY,MACZ,cAAcd,CAAU,EACxBG,EAAS,QAAQ,CAAE,QAAS,gBAAkB,CAAA,EAC9CN,EAAQ,gBAAgB,UAAU,GAGtC,KAAM,CAAE,KAAAU,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUS,CAAS,EAC7DhB,EAAQ,cAAc,aAAa,EAAE,YAAca,EAASJ,CAAI,EAChET,EAAQ,cAAc,cAAc,EAAE,YAAca,EAASH,CAAK,EAClEV,EAAQ,cAAc,gBAAgB,EAAE,YAAca,EAASF,CAAO,EACtEX,EAAQ,cAAc,gBAAgB,EAAE,YAAca,EAASD,CAAO,CAC1E,CAKA;AAsBA;AAsBA;AA0DA;"}