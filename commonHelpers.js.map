{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst startBtn = document.querySelector('[data-start]');\nconst days = document.querySelector('[data-days]');\nconst hours = document.querySelector('[data-hours]');\nconst minutes = document.querySelector('[data-minutes]');\nconst seconds = document.querySelector('[data-seconds]');\nconst inputEl = document.querySelector('[type=\"text\"]');\nconst timerEl = document.querySelector('.timer');\nconst field = document.querySelector('.field');\nlet userSelectedDate;\n//!===================================================================\nstartBtn.addEventListener('click', () => {\n    timer.start();\n    startBtn.setAttribute('disabled', '');\n});\n\ninputEl.addEventListener('input', e => {\n    const currentDate = Date.now();\n    if (Date.now() <= currentDate) {\n        startBtn.disabled = true;\n    startBtn.setAttribute('disabled', '');\n        \n    iziToast.show({\n    message: \"Please choose a date in the future\"\n});\n    }\n    startBtn.disabled = false;\n    timer.start();\n})\n//!===================================================================\nclass Timer {\n    constructor(onTick, date) {\n        this.isActive = false;\n        this.initTime = date;\n        this.tick = onTick;\n        this.intervalId = null;\n    }\n\n    start() {\n        if (this.isActive) return;\n        this.isActive = true;\n\n        this.intervalId = setInterval(() => {\n            const ms = this.initTime - Date.now();\n            const time = this.convertMs(ms);\n            this.tick(time);\n        }, 1000);\n\n        setTimeout(() => {\n            clearInterval(this.intervalId);\n        }, this.initTime = Date.now());\n    }\n\n convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n    }\n    \n    padStart(value) {\n    return String(value).padStart(2, \"0\");\n    }\n}\n\nfunction tick({days, hours, mins, secs}) {\n    field.querySelector('[data-days]').textContent = padStart(days);\n    field.querySelector('[data-hours]').textContent = padStart(hours);\n    field.querySelector('[data-minutes]').textContent = padStart(mins);\n    field.querySelector('[data-seconds]').textContent = padStart(secs);\n\n}\n     \n\n//!===================================================================\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates;\n    console.log(selectedDates[0]);\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nconst date = new Date('2024-05-16 12:39');\nconst timer = new Timer(tick, date);\n\n\n\n//!===================================================================\n// function updateMarkup() {\n//     const currentDate = Date.now();\n//     const { hours, minutes, seconds } = convertMs(currentDate);\n \n//     timerEl.querySelector('[data-hours]').textContent = padStart(hours);\n//     timerEl.querySelector('[data-minutes]').textContent = padStart(minutes);\n//     timerEl.querySelector('[data-seconds]').textContent = padStart(seconds);\n// }\n\n// setInterval(updateMarkup, 1000);\n\n\n//!===================================================================\n\n"],"names":["startBtn","inputEl","field","timer","e","currentDate","iziToast","Timer","onTick","date","ms","time","days","hours","minutes","seconds","value","tick","mins","secs","options","selectedDates","flatpickr"],"mappings":"+IAMA,MAAMA,EAAW,SAAS,cAAc,cAAc,EACzC,SAAS,cAAc,aAAa,EACnC,SAAS,cAAc,cAAc,EACnC,SAAS,cAAc,gBAAgB,EACvC,SAAS,cAAc,gBAAgB,EACvD,MAAMC,EAAU,SAAS,cAAc,eAAe,EACtC,SAAS,cAAc,QAAQ,EAC/C,MAAMC,EAAQ,SAAS,cAAc,QAAQ,EAE7C;AACAF,EAAS,iBAAiB,QAAS,IAAM,CACrCG,EAAM,MAAK,EACXH,EAAS,aAAa,WAAY,EAAE,CACxC,CAAC,EAEDC,EAAQ,iBAAiB,QAASG,GAAK,CACnC,MAAMC,EAAc,KAAK,MACrB,KAAK,IAAK,GAAIA,IACdL,EAAS,SAAW,GACxBA,EAAS,aAAa,WAAY,EAAE,EAEpCM,EAAS,KAAK,CACd,QAAS,oCACb,CAAC,GAEGN,EAAS,SAAW,GACpBG,EAAM,MAAK,CACf,CAAC,EACD;AACA,MAAMI,CAAM,CACR,YAAYC,EAAQC,EAAM,CACtB,KAAK,SAAW,GAChB,KAAK,SAAWA,EAChB,KAAK,KAAOD,EACZ,KAAK,WAAa,IACrB,CAED,OAAQ,CACA,KAAK,WACT,KAAK,SAAW,GAEhB,KAAK,WAAa,YAAY,IAAM,CAChC,MAAME,EAAK,KAAK,SAAW,KAAK,IAAG,EAC7BC,EAAO,KAAK,UAAUD,CAAE,EAC9B,KAAK,KAAKC,CAAI,CACjB,EAAE,GAAI,EAEP,WAAW,IAAM,CACb,cAAc,KAAK,UAAU,CAChC,EAAE,KAAK,SAAW,KAAK,IAAK,CAAA,EAChC,CAEJ,UAAUD,EAAI,CAQb,MAAME,EAAO,KAAK,MAAMF,EAAK,KAAG,EAE1BG,EAAQ,KAAK,MAAOH,EAAK,MAAO,IAAI,EAEpCI,EAAU,KAAK,MAAQJ,EAAK,MAAO,KAAQ,GAAM,EAEjDK,EAAU,KAAK,MAASL,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACnC,CAED,SAASC,EAAO,CAChB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACnC,CACL,CAEA,SAASC,EAAK,CAAC,KAAAL,EAAM,MAAAC,EAAO,KAAAK,EAAM,KAAAC,CAAI,EAAG,CACrCjB,EAAM,cAAc,aAAa,EAAE,YAAc,SAASU,CAAI,EAC9DV,EAAM,cAAc,cAAc,EAAE,YAAc,SAASW,CAAK,EAChEX,EAAM,cAAc,gBAAgB,EAAE,YAAc,SAASgB,CAAI,EACjEhB,EAAM,cAAc,gBAAgB,EAAE,YAAc,SAASiB,CAAI,CAErE,CAGA;AACA,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CAEvB,QAAQ,IAAIA,EAAc,CAAC,CAAC,CAC7B,CACH,EAEAC,EAAU,mBAAoBF,CAAO,EAErC,MAAMX,EAAO,IAAI,KAAK,kBAAkB,EAClCN,EAAQ,IAAII,EAAMU,EAAMR,CAAI,EAIlC;AAaA;"}